<?php

/*
 * This file is part of the IOTA PHP package.
 *
 * (c) Benjamin Ansbach <benjaminansbach@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace IOTA\Examples\Spammer;

use IOTA\ClientApi\ClientApi;
use IOTA\DI\IOTAContainer;
use IOTA\Client;
use IOTA\Node;
use IOTA\RemoteApi\RemoteApi;
use IOTA\Type\Address;
use IOTA\Type\Seed;
use IOTA\Type\Tag;
use IOTA\Type\Transfer;
use IOTA\Util\TrytesUtil;

require_once __DIR__.'/../vendor/autoload.php';

error_reporting(E_ALL);
ini_set('display_errors', 1);
set_time_limit(0);

$options = [
    'keccak384-nodejs' => 'http://127.0.0.1:8081',
    'ccurlPath' => __DIR__.'/../ccurl/build/bin',
];

$nodes = [
    new Node('http://node01.iotatoken.nl:14265'),
    new Node('http://node02.iotatoken.nl:14265'),
    new Node('http://node03.iotatoken.nl:15265'),
    new Node('http://node04.iotatoken.nl:14265'),
    new Node('http://node05.iotatoken.nl:16265'),
];

$container = new IOTAContainer($options);

$iota = new Client(
    $container->get(RemoteApi::class),
    $container->get(ClientApi::class),
    $nodes
);

$seed = '';
for ($i = 0; $i < 81; ++$i) {
    $seed .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ9'[random_int(0, 26)];
}
$seed = new Seed('OUKMI9OLXSC9TESE9EIGYSYJVNAJXHTRYWXIKR9RHDYGASDKOWBVQEJGHVKWFZXCQU9UJWZUKAWAYQIQR');
$message = 'This spam was generated by the PHP transaction spammer';
$tag = new Tag('IOTAPHP9IOTAPHPIOTA9');

function spam(Client $iota, $seed, $message, $tag)
{
    $node = $iota->getNode();
    echo "creating spam-transaction...\n";

    try {
        $bundleResponse = $iota->getClientApi()->sendTransfer($node, $seed, [
            (new Transfer())
                ->setRecipientAddress(new Address($seed->getSeed()))
                ->setValue(new \IOTA\Type\Iota(0))
                ->setObsoleteTag($tag)
                ->setMessage(TrytesUtil::asciiToTrytes($message)),
        ], 15, random_int(4, 12));

        echo "created spam-transaction:\n";
        echo 'Bundle: '.(string) $bundleResponse->getBundle()->getBundleHash()."\n";
        foreach ($bundleResponse->getBundle()->getTransactions() as $transaction) {
            echo '   Transaction: '.(string) $transaction->getTransactionHash()."\n";
        }
        echo 'Confirmed trunk:  '.(string) $bundleResponse->getTrunkTransactionHash()."\n";
        echo 'Confirmed branch: '.(string) $bundleResponse->getBranchTransactionHash()."\n";
        echo str_repeat('-', 80)."\n\n";
        echo 'Bundle: '.(string) $bundleResponse->getBundle()->getBundleHash()."\n";
        echo (string) $bundleResponse->getBundle()->getBundleHash()."\n";
    } catch (\Exception $ex) {
        echo 'ERROR: '.$ex->getMessage()."\n";
    }

    sleep(3);
    spam($iota, $seed, $message, $tag);
}

spam($iota, $seed, $message, $tag);
